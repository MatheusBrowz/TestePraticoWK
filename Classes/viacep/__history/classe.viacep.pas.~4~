unit classe.viacep;

interface

uses classe.base;

type

  TClasseViacep = class(TClasseBase)
  private
    Flogradouro: string;
    Fbairro: string;
    Fuf: string;
    Fcep: string;
    Flocalidade: string;
    Fcomplemento: string;

    procedure Setbairro(const Value: string);
    procedure Setcep(const Value: string);
    procedure Setcomplemento(const Value: string);
    procedure Setlocalidade(const Value: string);
    procedure Setlogradouro(const Value: string);
    procedure Setuf(const Value: string);
  public
    property cep: string read Fcep write Setcep;
    property logradouro: string read Flogradouro write Setlogradouro;
    property complemento: string read Fcomplemento write Setcomplemento;
    property bairro: string read Fbairro write Setbairro;
    property localidade: string read Flocalidade write Setlocalidade;
    property uf: string read Fuf write Setuf;

    function ToClasseEndereco(): String;
  end;

implementation

uses
  classe.endereco;

{ TClasseViacep }

procedure TClasseViacep.Setbairro(const Value: string);
begin
  Fbairro := Value;
end;

procedure TClasseViacep.Setcep(const Value: string);
begin
  Fcep := Value;
end;

procedure TClasseViacep.Setcomplemento(const Value: string);
begin
  Fcomplemento := Value;
end;

procedure TClasseViacep.Setlocalidade(const Value: string);
begin
  Flocalidade := Value;
end;

procedure TClasseViacep.Setlogradouro(const Value: string);
begin
  Flogradouro := Value;
end;

procedure TClasseViacep.Setuf(const Value: string);
begin
  Fuf := Value;
end;

function TClasseViacep.ToClasseEndereco: String;
var
  endereco : TEndereco;
begin
  Result := '';
  endereco := TEndereco.Create;

  try

  finally
    FreeAndNil(endereco);
  end;
end;

end.
